@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService
@inject NavigationManager Navigation

<div class="card-deck">
  @foreach (var product in ProductService.GetProducts())
  {
    <div class="col-md-4 my-4">
      <div class="card-header">
        <h2 class="h5 card-title poketitle">@product.Name</h2>
      </div>
      <img class="card-img-top img-fluid" src="@product.Image" alt="@product.Description">
      <div class="card-footer d-flex justify-content-between align-items-center">
        <p class="card-text my-0 fancyscript">Availabity: @product.Availability</p>
        <p class="card-text my-0 fancyscript">Value: @product.Value.ToString("C")</p>
        <small class="text-muted">
          <button @onclick="(e => SelectProduct(product.Id))" data-toggle="modal" data-target="#productModal" class="btn btn-primary happy">More Info</button>
        </small>
      </div>
    </div>
  }
</div>

@if (selectedProduct == null)
{
  selectedProduct = ProductService.GetFirstProduct();
}

<div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h2 class="h4 modal-title poketitle" id="productTitle">@selectedProduct.Name</h2>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div class="container-fluid">
          <div class="row">
            <div class="col-md-6">
              <img class="img-fluid image" src="@selectedProduct.Image">
            </div>
            <div class="col-md-6">
              <p>Name: @selectedProduct.Name</p>
              <p>Description: @selectedProduct.Description</p>
              <p>Availability: @selectedProduct.Availability</p>
              <p>Rarity: @selectedProduct.Rarity</p>
              <p>Expansion: @selectedProduct.Expansion</p>
              <p>Type:</p>
              <ul>
                @foreach (var typeName in @selectedProduct.Type)
                {
                  <li>@typeName</li>
                }
              </ul>
              <p>Price: @selectedProduct.Value.ToString("C")</p>
            </div>
          </div>
        </div>
      </div>

      <div class="modal-footer">
        <div class="container-fluid">
          <div class="row">
            <div class="col">
              @{
                var voteString = @voteCount + " " + @voteLabel;

                if (voteCount == 0)
                {
                  voteString = "Be the first to vote!";
                }

                <span>@voteString</span>

                for (int i = 1; i < 6; i++)
                {
                  var currentStar = i;
                  var checkedText = "";

                  if (i <= currentRating)
                  {
                    checkedText = "checked";
                  }

                  <span class="fa fa-star @checkedText" @onclick="(e => SubmitRating(currentStar))"></span>
                }
              }
            </div>
          </div>

          <div class="row">
            <div class="col">
              @{
                // First show all the existing comments
                foreach (var comment in selectedProduct.CommentList)
                {
                  <div class="row">
                    <div class="col">
                      @comment.Comment
                    </div>
                  </div>
                }

                // If this is a new comment, then add the Input boxes for it, else show the Add Comment Button
                if (NewComment)
                {
                  <div class="row">
                    <div class="col">
                      <input type="text" @onchange="(e) => UpdateCommentText(e.Value.ToString())" value="@NewCommentText" />
                      <button @onclick="(e => AddComment())" class="btn btn-success" data-toggle="modal">Save Comment</button>
                    </div>
                  </div>
                }

                // If this is not a new comment, then show the buttons for Adding comment and Close
                if (NewComment == false)
                {
                  <div class="row">
                    <div class="col">
                      <button @onclick="(e => ShowNewCommentInput())" id="AddComment" class="btn btn-primary">Add Comment</button>
                      <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                  </div>
                }
              }
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
  ProductModel selectedProduct;
  string selectedProductId;
  string FilterDataString = "";
  bool FilterData = false;

  void SelectProduct(string productId)
  {
    selectedProductId = productId;
    selectedProduct = ProductService.GetProducts().First(x => x.Id == productId);
    GetCurrentRating();
  }

  void SelectedProduct(string productId)
  {
    selectedProductId = productId;
    selectedProduct = ProductService.GetProducts().First(x => x.Id == productId);
    GetCurrentRating();
  }

  int currentRating = 0;
  int voteCount = 0;
  string voteLabel;

  void GetCurrentRating()
  {
    if (selectedProduct.Ratings.Count() == 0)
    {
      currentRating = 0;
      voteCount = 0;
    }
    else
    {
      voteCount = selectedProduct.Ratings.Count();
      voteLabel = voteCount > 1 ? "Votes" : "Vote";
      currentRating = selectedProduct.Ratings.Sum() / voteCount;
    }

    System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
  }

  bool NewComment = false;
  string NewCommentText = "";

  void ShowNewCommentInput()
  {
    NewComment = true;
  }

  void UpdateCommentText(string newCommentText)
  {
    NewCommentText = newCommentText;
  }

  void AddComment()
  {
    selectedProduct.CommentList.Add(new CommentModel() { Comment = NewCommentText });
    ProductService.SaveComment(selectedProduct);
    NewComment = false;
  }
  void UpdateFilterText(string text)
  {
    FilterDataString = text;
  }

  void EnableFilterData()
  {
    FilterData = true;
  }

  void ClearFilterData()
  {
    FilterData = false;
  }

  void SubmitRating(int rating)
  {
    System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
    ProductService.AddRating(selectedProductId, rating);
    SelectProduct(selectedProductId);
  }

  void NavigateToReadPage(string productId)
  {
    var url = $"/Product/Read/{productId}";
    Navigation.NavigateTo(url, true);
  }
}
