@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService
@inject NavigationManager Navigation

<div class="card-deck">
  @foreach (var product in ProductService.GetProducts())
  {
    <div class="col-md-4 my-4">
      <div class="card-header">
        <h4 class="card-title happy">@product.Name</h4>
      </div>
      <img class="card-img-top img-fluid" src="@product.Image" alt="@product.Description">
      <div class="card-footer d-flex justify-content-between align-items-center">
        <p class="card-text my-0 happy">Availabity: @product.Availability</p>
        <p class="card-text my-0 happy">Value: @product.Value.ToString("C")</p>
        <small class="text-muted">
          <button @onclick="(e => SelectProduct(product.Id))" data-toggle="modal" data-target="#productModal" class="btn btn-primary happy">More Info</button>
        </small>
      </div>
    </div>
  }
</div>

@if (selectedProduct == null)
{
  selectedProduct = ProductService.GetFirstProduct();
}

<div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="productTitle">@selectedProduct.Name</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div class="card card-modal">
          <img class="custom-image" src="@selectedProduct.Image">
          <div class="card-body">
            <p class="card-text">Name: @selectedProduct.Name</p>
            <p class="card-text">Description: @selectedProduct.Description</p>
            <p class="card-text">Availability: @selectedProduct.Availability</p>
            <p class="card-text">Rarity: @selectedProduct.Rarity</p>
            <p class="card-text">Expansion: @selectedProduct.Expansion</p>
            <p class="card-text">Type:</p>
            <ul class="card-text">
              @foreach (var typeName in @selectedProduct.Type)
              {
                <li class="card-text @typeName">@typeName</li>
              }
            </ul>
            <p class="card-text">Price: @selectedProduct.Value.ToString("C")</p>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        @if (voteCount == 0)
        {
          <span>Be the first to vote!</span>
        }
        else
        {
          <span>@voteCount @voteLabel</span>
        }
        @for (int i = 1; i < 6; i++)
        {
          var currentStar = i;
          if (i <= currentRating)
          {
            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
          }
          else
          {
            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
          }
        }
      </div>
    </div>
  </div>
</div>


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
  ProductModel selectedProduct;
  string selectedProductId;

  void SelectProduct(string productId)
  {
    selectedProductId = productId;
    selectedProduct = ProductService.GetProducts().First(x => x.Id == productId);
    GetCurrentRating();
  }

  void SelectedProduct(string productId)
  {
    selectedProductId = productId;
    selectedProduct = ProductService.GetProducts().First(x => x.Id == productId);
    GetCurrentRating();
  }

  int currentRating = 0;
  int voteCount = 0;
  string voteLabel;

  void GetCurrentRating()
  {
    if (selectedProduct.Ratings == null)
    {
      currentRating = 0;
      voteCount = 0;
    }
    else
    {
      voteCount = selectedProduct.Ratings.Count();
      voteLabel = voteCount > 1 ? "Votes" : "Vote";
      currentRating = selectedProduct.Ratings.Sum() / voteCount;
    }

    System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
  }

  void SubmitRating(int rating)
  {
    System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
    ProductService.AddRating(selectedProductId, rating);
    SelectProduct(selectedProductId);
  }

  void NavigateToReadPage(string productId)
  {
    var url = $"/Product/Read/{productId}";
    Navigation.NavigateTo(url, true);
  }
}
