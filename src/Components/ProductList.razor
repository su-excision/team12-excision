@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService
@inject NavigationManager Navigation

<div class="container my-4">
    <div class="row">
        <div class="col-md-8 mx-auto">
            <div class="input-group">
                <input type="text" class="form-control" test-id="text_filter" @bind="filterString" />
                <div class="input-group-append">
                    <button test-id="filter_button" @onclick="(e => EnableFilterData())" class="btn btn-success"><i class="fa-solid fa-filter"></i></button>
                    <button test-id="clear_button" @onclick="(e => ClearFilterData())" class="btn btn-danger"><i class="fa-solid fa-xmark"></i></button>
                </div>

            </div>
        </div>
        <div class="col-md-4 mx-auto">
            <select class="form-control" test-id="type_selector" @bind="selectedFilterOption">
                @foreach (var option in filterOptions)
                {
                    <option value="@option">@option</option>
                }
            </select>
        </div>
    </div>
</div>

<div class="card-deck">
    @{
        // get the products from the ProductService
        var productList = ProductService.GetProducts();

        // if filtering is activated
        if (isListFiltered)
        {
            // filter the product list
            productList = productList.Where(product => product.Name.ToUpper().Contains(filterString.ToUpper()));
        }

        // if filtering drop down menu is activated
        if (selectedFilterOption != "All")
        {
            // filter the product list
            productList = productList.Where(product => product.Name.Contains(filterString, StringComparison.OrdinalIgnoreCase));
        }

        // build the card layout for the cards
        foreach (var product in productList)
        {
            <div class="col-md-4 my-4">
                <div class="card-header">
                    <h2 class="h5 card-title poketitle">@product.Name</h2>
                </div>
                <img class="card-img-top img-fluid" src="@product.Image" alt="@product.Description">
                <div class="card-footer d-flex justify-content-between align-items-center">
                    <p class="card-text my-0 fancyscript">Availabity: @product.Availability</p>
                    <p class="card-text my-0 fancyscript">Value: @product.Value.ToString("C")</p>
                    <small class="text-muted">
                        <button @onclick="(e => SelectProduct(product.Id))" test-id="MoreInfo_@product.Id" data-toggle="modal" data-target="#productModal" class="btn btn-primary happy">More Info</button>
                    </small>
                </div>
            </div>
        }
    }
</div>

@if (selectedProduct == null)
{
    selectedProduct = ProductService.GetFirstProduct();
}

<div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="h4 modal-title poketitle" id="productTitle">@selectedProduct.Name</h2>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-md-6">
                            <img class="img-fluid image" src="@selectedProduct.Image">
                        </div>
                        <div class="col-md-6">
                            <p>Name: @selectedProduct.Name</p>
                            <p>Description: @selectedProduct.Description</p>
                            <p>Availability: @selectedProduct.Availability</p>
                            <p>Rarity: @selectedProduct.Rarity</p>
                            <p>Expansion: @selectedProduct.Expansion</p>
                            <p>Type:</p>
                            <ul>
                                @foreach (var typeName in @selectedProduct.Type)
                                {
                                    <li>@typeName</li>
                                }
                            </ul>
                            <p>Price: @selectedProduct.Value.ToString("C")</p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col">
                            @{
                                var voteString = @voteCount + " " + @voteLabel;

                                if (voteCount == 0)
                                {
                                    voteString = "Be the first to vote!";
                                }

                                <span>@voteString</span>

                                for (int i = 1; i < 6; i++)
                                {
                                    var currentStar = i;
                                    var checkedText = "";

                                    if (i <= currentRating)
                                    {
                                        checkedText = "checked";
                                    }

                                    <img src="@(checkedText == "checked" ? "/images/pokeball-filled.png" : "/images/pokeball-unfilled.png")" alt="Pokeball" @onclick="(e => SubmitRating(currentStar))" class="pokeball-icon" test-id="vote_button" />
                                }
                            }
                        </div>
                    </div>

                    <div class="row">
                        <div class="col">
                            @{
                                // First show all the existing comments
                                foreach (var comment in selectedProduct.CommentList)
                                {
                                    <div class="row">
                                        <div class="col">
                                            @comment.Comment
                                        </div>
                                    </div>
                                }

                                // If this is a new comment, then add the Input boxes for it, else show the Add Comment Button
                                if (isNewCommentVisible)
                                {
                                    <div class="row">
                                        <div class="col">
                                            <input type="text" test-id="new_comment_input" @bind="newCommentText" />
                                            <button @onclick="(e => AddComment())" class="btn btn-success" test-id="add_comment_button" data-toggle="modal">Save Comment</button>
                                        </div>
                                    </div>
                                }

                                // If this is not a new comment, then show the buttons for Adding comment and Close
                                if (isNewCommentVisible == false)
                                {
                                    <div class="row">
                                        <div class="col">
                                            <button @onclick="(e => ShowNewCommentInput())" id="AddComment" test-id="new_comment_button" class="btn btn-primary">Add Comment</button>
                                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
    ProductModel selectedProduct;
    string selectedProductId;
    string filterString = "";
    bool isListFiltered = false;

    List<string> filterOptions = new List<string> {"All", "Grass", "Dark", "Fairy", "Fire", "Bug", "Steel",
"Psychic", "Normal", "Water", "Fighting", "Flying"};
    string selectedFilterOption = "All";

    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetProduct(productId);
        GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    void GetCurrentRating()
    {
        if (selectedProduct.Ratings.Count() == 0)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    bool isNewCommentVisible = false;
    string newCommentText = "";

    /// <summary>
    /// Shows the New Comment interface
    /// </summary>
    void ShowNewCommentInput()
    {
        isNewCommentVisible = true;
    }

    /// <summary>
    /// Adds the new comment to the product and saves the product to the datastore
    /// </summary>
    void AddComment()
    {
        // add comment to comment list and save
        selectedProduct.CommentList.Add(new CommentModel() { Comment = newCommentText });
        ProductService.UpdateData(selectedProduct);

        // clear comment text and hide input
        newCommentText = "";
        isNewCommentVisible = false;
    }


    /// <summary>
    /// Activates the filtering feature of the Component.
    /// </summary>
    void EnableFilterData()
    {
        isListFiltered = true;
    }

    /// <summary>
    /// Deactivates the filtering feature of the Component. In addition, clears
    /// all search and filters.
    /// </summary>
    void ClearFilterData()
    {
        isListFiltered = false;
        filterString = "";
    }

    /// <summary>
    /// Adds a numeric rating to the selected product.
    /// </summary>
    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }

}
